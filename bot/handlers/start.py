from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from asgiref.sync import sync_to_async
from django.contrib.auth import get_user_model
from users.models import Profile, Category  # –ø—É—Ç—å –∫ —Ç–≤–æ–µ–π –º–æ–¥–µ–ª–∏
from recipes.models import Recipe  # –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤
import random
from aiogram import types
import logging
from aiogram.types import InputFile
from pathlib import Path
from django.db import IntegrityError
router = Router()

logger = logging.getLogger(__name__)

class RegisterState(StatesGroup):
    first_name = State()
    last_name = State()
    email = State()

# –ö–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã
def get_payment_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="pay_now")],
        [InlineKeyboardButton(text="‚è≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ—Ç–æ–º", callback_data="pay_later")]
    ])

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
@sync_to_async
def get_or_create_user_by_telegram_id(telegram_id):
    try:
        profile = Profile.objects.get(telegram_id=str(telegram_id))
        return profile, True
    except Profile.DoesNotExist:
        return None, False

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ—Ñ–∏–ª—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏

@sync_to_async
def create_user_with_profile(telegram_id, first_name, last_name, email):
    user_model = get_user_model()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å —Å —Ç–∞–∫–∏–º telegram_id
    try:
        profile = Profile.objects.get(telegram_id=int(telegram_id))  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ telegram_id
        user = profile.user  # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return profile  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
    except Profile.DoesNotExist:
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user, created = user_model.objects.get_or_create(
            username=email,
            first_name=first_name,
            last_name=last_name,
            email=email,
        )

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        profile, created = Profile.objects.get_or_create(
            user=user,  # –°–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            defaults={'telegram_id': int(telegram_id)}  # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º —Å —ç—Ç–∏–º telegram_id
        )


        if not profile.telegram_id:
            profile.telegram_id = int(telegram_id)
            profile.save()

        return profile
@router.message(Command('start'))
async def get_choice_free_or_premium(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è", callback_data='recipe')],
            [InlineKeyboardButton(text="Premium –≤–µ—Ä—Å–∏—è", callback_data='premium')],
        ]
    )
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç üëã\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!\n\n"
        "üîπ –•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç –¥–Ω—è?\n"
        "üîπ –ù—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫?\n"
        "üîπ –ò–ª–∏ —Ö–æ—á–µ—à—å —É–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (–≤–µ–≥–∞–Ω, –±–µ–∑ –≥–ª—é—Ç–µ–Ω–∞)?\n\n"
        "–í—ã–±–∏—Ä–∞–π –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ –∏–ª–∏ –∂–º–∏ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é!",
        reply_markup=keyboard
    )

@sync_to_async
def get_user_first_name(profile):
    return profile.user.first_name or profile.user.username

@router.callback_query(lambda c: c.data == "premium")
async def handle_premium(callback: types.CallbackQuery, state: FSMContext):
    telegram_id = str(callback.from_user.id)
    profile, exists = await get_or_create_user_by_telegram_id(telegram_id)

    if exists:
        user_first_name = await get_user_first_name(profile)
        await callback.message.answer(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user_first_name}!",
            reply_markup=get_payment_keyboard()
        )
    else:
        await state.set_state(RegisterState.first_name)
        await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

@router.message(RegisterState.first_name)
async def register_first_name(message: types.Message, state: FSMContext):
    await state.update_data(first_name=message.text)
    await state.set_state(RegisterState.last_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")

@router.message(RegisterState.last_name)
async def register_last_name(message: types.Message, state: FSMContext):
    await state.update_data(last_name=message.text)
    await state.set_state(RegisterState.email)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Email:")

@router.message(RegisterState.email)
async def register_email(message: types.Message, state: FSMContext):
    telegram_id = str(message.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    existing_profile, exists = await get_or_create_user_by_telegram_id(telegram_id)
    if exists:
        await state.clear()
        user_first_name = await get_user_first_name(existing_profile)
        await message.answer(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user_first_name}!",
            reply_markup=get_payment_keyboard()
        )
        return

    data = await state.get_data()

    try:
        await create_user_with_profile(
            telegram_id=telegram_id,
            first_name=data["first_name"],
            last_name=data["last_name"],
            email=message.text
        )
        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=get_payment_keyboard())
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    finally:
        await state.clear()


@sync_to_async
def get_all_categories():
    return list(Category.objects.all())


@router.callback_query(lambda c: c.data == "pay_now")
async def handle_pay_now(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer("üîê –û—Ç–ª–∏—á–Ω–æ! –°–µ–π—á–∞—Å –ø–æ–∫–∞–∂–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª—é–¥!")

    categories = await get_all_categories()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=cat.name, callback_data=f"category_{cat.id}")]
        for cat in categories
    ])

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)

@sync_to_async
def get_recipes_by_category_id(category_id):
    return list(Recipe.objects.filter(categories__id=category_id).distinct()[:3])

@router.callback_query(lambda c: c.data.startswith("category_"))
async def handle_category(callback: types.CallbackQuery):
    await callback.answer()
    category_id = int(callback.data.split("_")[1])
    recipes = await get_recipes_by_category_id(category_id)

    if recipes:
        for recipe in recipes:
            caption = f"üçΩ {recipe.title}\nüí∞ ~{recipe.estimated_cost} ‚ÇΩ"

            if recipe.image and Path(recipe.image.path).exists():
                photo = FSInputFile(recipe.image.path)
                await callback.message.answer_photo(photo=photo, caption=caption)
                # –ü–æ–ª—É—á–∞–µ–º —à–∞–≥–∏
                steps = await sync_to_async(list)(recipe.steps.all())

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —à–∞–≥–∏
                for step in steps:
                    text = step.text
                    if step.image and Path(step.image.path).exists():
                        step_photo = FSInputFile(step.image.path)
                        await callback.message.answer_photo(photo=step_photo, caption=text)
                    else:
                        await callback.message.answer(text)
            else:
                await callback.message.answer(caption)
    else:
        await callback.message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")

@router.callback_query(lambda c: c.data == "pay_later")
async def handle_pay_later(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer("–•–æ—Ä–æ—à–æ, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–¥–ø–∏—Å–∫–µ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü—Ä–æ—Ñ–∏–ª—å¬ª üßæ")

@sync_to_async
def get_random_recipe_data():
    recipes = list(Recipe.objects.all())
    if not recipes:
        return None

    recipe = random.choice(recipes)

    def get_unit_display(unit_code):
        UNIT_CHOICES = [
            ("pcs", "—à—Ç."),
            ("g", "–≥"),
            ("kg", "–∫–≥"),
            ("tsp", "—á. –ª."),
            ("tbsp", "—Å—Ç. –ª."),
            ("cup", "—Å—Ç–∞–∫–∞–Ω"),
        ]
        for code, name in UNIT_CHOICES:
            if code == unit_code:
                return name
        return unit_code

    ingredients = [
        f"‚Ä¢ {ri.ingredient.name} ‚Äî {ri.amount} {get_unit_display(ri.unit)}"
        for ri in recipe.recipeingredient_set.all()
    ]

    steps = [
        f"{s.order}. {s.text}" for s in recipe.steps.all().order_by("order")
    ]

    return {
        "title": recipe.title,
        "ingredients": ingredients,
        "steps": steps,
        "image": FSInputFile(recipe.image.path) if recipe.image else None,
        "step_images": [
            FSInputFile(s.image.path) if s.image else None for s in recipe.steps.all().order_by("order")
        ],
        "price": recipe.estimated_cost,
    }

@router.callback_query(lambda c: c.data == "recipe")
async def get_recipe(callback: types.CallbackQuery):
    await callback.answer()

    recipe_data = await get_random_recipe_data()

    if recipe_data:
        ingredients = "\n".join(recipe_data['ingredients'])
        message = f"üçΩÔ∏è –†–µ—Ü–µ–ø—Ç –¥–Ω—è: {recipe_data['title']}\n\n{ingredients}"

        if recipe_data['image']:
            await callback.message.answer_photo(
                photo=recipe_data['image'],
                caption=message
            )
        else:
            await callback.message.answer(message)

        for step, step_image_url in zip(recipe_data['steps'], recipe_data['step_images']):
            step_message = f"{step}\n"
            if step_image_url:
                await callback.message.answer_photo(photo=step_image_url, caption=step_message)
            else:
                await callback.message.answer(step_message)

    else:
        await callback.message.edit_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ä–µ—Ü–µ–ø—Ç—ã —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

    price = f'–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–ª—é–¥–∞ {recipe_data["price"]} —Ä—É–±.'
    await callback.message.answer(price)
